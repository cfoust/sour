#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Prefixed to filenames
HASH="$1"

# The actual output directory
OUTPUT_DIR=${ASSET_OUTPUT_DIR:-$SCRIPT_DIR/output}
mkdir -p "$OUTPUT_DIR"

# Contains all of the interim calculations
WORKING_DIR="$SCRIPT_DIR/working"
mkdir -p "$WORKING_DIR"

# /home/gitpod/emsdk
EMSDK_DIR=${EMSDK:-/emsdk}

package_files() {
  target="$1"
	shift 1
	files="$@"

  target_dir="$WORKING_DIR/$target"

  echo "Packaging $HASH.$target.sour"

	found_files=""

	# Preprocess the files
	for infile in $files; do
    outfile="$target_dir/$infile"
    extension="${infile##*.}"

    #if ! [ -f "$infile" ] || [ -d "$infile" ]; then
    if ! [ -f "$infile" ]; then
      continue
    fi

    size=$(wc -c "$infile" | cut -f1 -d' ')

		found_files+="$infile "

    mkdir -p "$(dirname "$outfile")"

    if [ "$extension" != "dds" ] && [ "$extension" != "jpg" ] && [ "$extension" != "png" ]; then
      cp "$infile" "$outfile"
      continue
    fi

    if [ -f "$outfile" ]; then
      continue
    fi

    # Ignore small files and anything in data/ since those are the game's basic assets
    if [[ "$size" -lt 128000 ]] || [[ "$infile" == data* ]]; then
      cp "$infile" "$outfile"
      continue
    fi

    # Simplify the file
    convert "$infile" -resize 50% "$outfile"
    convert "$outfile" -resize 50% "$outfile"
	done

	# Package the files up
  cd "$target_dir"
  js_target="/tmp/$HASH.preload_$target.js"
  data_target="/tmp/$HASH.$target.data"
  blob_target="$OUTPUT_DIR/$HASH.$target.sour"

  python3 "$EMSDK_DIR/upstream/emscripten/tools/file_packager.py" \
					"$data_target" \
					--use-preload-plugins \
					--preload $found_files > "$js_target"

  python3 "$SCRIPT_DIR/condenser.py" "$data_target" "$js_target" "$blob_target"

  # Insert our _free() hack
	sed -i '/var files/a Module["registerNode"]({ name: REMOTE_PACKAGE_BASE, files: metadata["files"] });' "$js_target"
  cd "$SCRIPT_DIR"
}

package_map() {
  target="$1"

  mapname="$(basename -s .ogz "$target")"
  maplist="mapfiles/maps/$mapname.list"

  if ! [ -f "$maplist" ]; then
    return
  fi

  package_files "$mapname" $(cat $maplist)
}

maps=$(find packages/base/ -name '*.ogz')
maps="packages/base/complex.ogz packages/base/dust2.ogz"

for map in $maps; do
  mapfile=$(basename -s .ogz "$map")
  mapstub="packages/base/$mapfile.stub"
  touch "$mapstub"
  echo "$mapstub" >> mapfiles/maps.list
done

package_files base $(cat mapfiles/maps.list mapfiles/common.trimmed.list)

for map in $maps; do
  mapfile=$(basename -s .ogz "$map")
  package_map "$map" &
done

wait
